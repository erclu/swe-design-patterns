@startuml Observer
!include ../style/style.pu

abstract Subject {
  +attach(o : Observer)
  +detach(o : Observer)
  +notify()
}
note top
  cannot be an interface!
  notify() has an implementation
end note

note left of Subject::notify
  foreach o in observers
  o.update()
end note

class ConcreteSubject {
  -subjectState
  +getState()
}

interface Observer <<interface>> {
  +update()
}
note top
  can be an interface
end note

class ConcreteObserver {
  -observerState
  +update()
}

note right of ConcreteObserver::update()
  observerState =
    subject.getState()
end note

ConcreteSubject -up-|> Subject
ConcreteObserver .up.|> Observer
Subject -right-> Observer : observer
ConcreteObserver -left-> ConcreteSubject : subject

@enduml
